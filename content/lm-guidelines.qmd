---
title: "Guidelines on LM-generated content / AI-assistance"
author: "Thomas Brochhagen"
date: today
format: html
---

This document lays out my personal policy concerning content generated by Language Models (LMs), and assistance through artificial intelligence more generally. I expect people working with me –students and collaborators– to adhere to these guidelines; or to let me know if they don’t. These guidelines are not set in stone. They are bound to change over time. I’m happy to talk about them with you if you disagree with them.

If you are a student, please note that this document is complementary to your institution’s guidelines on the topic. Always adhere to the stricter of the two. For example, If your university explicitly states that AI is prohibited for your thesis then it is prohibited. Here are the guidelines for UPF: [https://guiesbibtic.upf.edu/iag/normativa](https://guiesbibtic.upf.edu/iag/normativa). 

## Writing
I believe that writing is an important and central tool of scientific inquiry. Writing is thinking. And producing scientific writing allows you to share your personal perspective on the topic with others. There is value to it. Heavily relying on LMs for your writing means that you are robbing yourself of the chance to think; of others of your way of thinking; and me of my time by having me edit and revise a text that you didn’t write yourself.

Accordingly, I expect that (minimally) the first and last version of anything you write was written, read, approved, and digested by yourself. You are free to use an LM to edit the intermediate stages of your writing. I certainly see the benefits in using technology for light editing. In other words, editing (e.g., grammar, typos or that one sentence that is awkward but you don’t know how to reformulate) is fine but not the generation of text or content. If the text is not yours then it is not OK to pass it off as yours.

## Programming
As with writing, programming is a way to lay out your thoughts. There are parts that can be useful to automatize (e.g., you forgot the syntax for printing and co-pilot offers you a suggestion) and others that are not (e.g., you don’t know what a parameter in pytorch does and co-pilot offers a suggestion). As with writing, you are ultimately responsible for understanding all of your code. Anything generated by a model needs to be accordingly checked thoroughly and approved by you. If you want concrete suggestions on how to check your code and be responsible for it, let me know.


### Summary writing


| Writing | You | Language Model |
|:-----------------------------|:----:|:---------------:|
| First & final version        | X   |                |
| Content                      | X   |                |
| Grammar, formulations, style | X   | X              |
| Structure                    | X   |                |


### Summary Programming 
| Programming | You | Language Model |
|:-----------------------------|:----:|:---------------:|
| Approach (methods, algorithms, models) | X   |                 |
| Syntax                              | X   | X                  |
| Refactoring                         | X   | ☑ (carefully)      |
| Validation & tests                  | X   | ☑ (carefully)      |
| Documentation                       | X   | X                  |